//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Public.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Public: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Public()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Public"",
    ""maps"": [
        {
            ""name"": ""Useful"",
            ""id"": ""0ff87072-c8a2-4f9c-8706-17b58878c68a"",
            ""actions"": [
                {
                    ""name"": ""Positive"",
                    ""type"": ""Button"",
                    ""id"": ""2e1890b8-1c43-418f-9141-a9ad8809bf27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Negative"",
                    ""type"": ""Button"",
                    ""id"": ""d8e0c3d6-8226-4dfd-9409-aa60b47bfe15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""76af5c33-7122-480b-b351-a1aa81b72f5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cadf2e7-9202-4f88-b3bf-214f74a11745"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f101d4ea-cb53-4269-a8af-e7baefbd2263"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff86d040-bc8b-4c53-a996-736f48910205"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ccae8fc-76f5-4b97-8e58-148c97dcaf1f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66b97107-2649-45b4-8481-5e32c812eb2d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b68d11de-6d5d-41cb-ac17-6525011f629a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5df5841-8b95-4721-9470-64057250461f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PublicSchema"",
            ""bindingGroup"": ""PublicSchema"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Useful
        m_Useful = asset.FindActionMap("Useful", throwIfNotFound: true);
        m_Useful_Positive = m_Useful.FindAction("Positive", throwIfNotFound: true);
        m_Useful_Negative = m_Useful.FindAction("Negative", throwIfNotFound: true);
        m_Useful_Pause = m_Useful.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Useful
    private readonly InputActionMap m_Useful;
    private List<IUsefulActions> m_UsefulActionsCallbackInterfaces = new List<IUsefulActions>();
    private readonly InputAction m_Useful_Positive;
    private readonly InputAction m_Useful_Negative;
    private readonly InputAction m_Useful_Pause;
    public struct UsefulActions
    {
        private @Public m_Wrapper;
        public UsefulActions(@Public wrapper) { m_Wrapper = wrapper; }
        public InputAction @Positive => m_Wrapper.m_Useful_Positive;
        public InputAction @Negative => m_Wrapper.m_Useful_Negative;
        public InputAction @Pause => m_Wrapper.m_Useful_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Useful; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UsefulActions set) { return set.Get(); }
        public void AddCallbacks(IUsefulActions instance)
        {
            if (instance == null || m_Wrapper.m_UsefulActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UsefulActionsCallbackInterfaces.Add(instance);
            @Positive.started += instance.OnPositive;
            @Positive.performed += instance.OnPositive;
            @Positive.canceled += instance.OnPositive;
            @Negative.started += instance.OnNegative;
            @Negative.performed += instance.OnNegative;
            @Negative.canceled += instance.OnNegative;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IUsefulActions instance)
        {
            @Positive.started -= instance.OnPositive;
            @Positive.performed -= instance.OnPositive;
            @Positive.canceled -= instance.OnPositive;
            @Negative.started -= instance.OnNegative;
            @Negative.performed -= instance.OnNegative;
            @Negative.canceled -= instance.OnNegative;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IUsefulActions instance)
        {
            if (m_Wrapper.m_UsefulActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUsefulActions instance)
        {
            foreach (var item in m_Wrapper.m_UsefulActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UsefulActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UsefulActions @Useful => new UsefulActions(this);
    private int m_PublicSchemaSchemeIndex = -1;
    public InputControlScheme PublicSchemaScheme
    {
        get
        {
            if (m_PublicSchemaSchemeIndex == -1) m_PublicSchemaSchemeIndex = asset.FindControlSchemeIndex("PublicSchema");
            return asset.controlSchemes[m_PublicSchemaSchemeIndex];
        }
    }
    public interface IUsefulActions
    {
        void OnPositive(InputAction.CallbackContext context);
        void OnNegative(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
